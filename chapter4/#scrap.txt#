Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   286                                                   @profile          
   287                                                   def _sample_until_next_action(self, t):
   288                                                       """
   289                                                       Draws samples until the attacker's next time to act.   First, it
   290                                                       samples from a distribution to determine if there is a message before
   291                                                       the next attacker action.  Then, conditional on the event occuring, it
   292                                                       samples the event time.
   293                                                       
   294                                                        generates  a sample from
   295                                                       the exponential distirbuiton with parameter lambda truncated at T
   296                                                       """
   297     10836         6704      0.6      0.2              deltat = 0
   298     10836        10044      0.9      0.3              u = np.random.random()
   299     10836        28178      2.6      0.9              benign_message = u < 1-np.exp(-1./self._event_rate * (self.gamma - deltat))
   300     10836         5251      0.5      0.2              alarm = False
   301     32749        19232      0.6      0.6              while ((benign_message) and (not alarm)):
   302     21913        50149      2.3      1.6                  R = np.random.random()*(1-np.exp(-(self.gamma-deltat)*1./self._event_rate))
   303     21913        38005      1.7      1.2                  change =-np.log(1-R)*self._event_rate
   304     21913        14632      0.7      0.5                  deltat += change
   305     21913       560361     25.6     18.2                  nextsender = np.random.choice(self._n_hosts, p=self._normed_rowsums)
   306     21913        17671      0.8      0.6                  nextreceiver = np.random.choice(self._n_hosts, 
   307     21913        21085      1.0      0.7                                                  p=self.lambdaB[nextsender] / 
   308     21913       610177     27.8     19.8                                                  float(np.sum(self.lambdaB[nextsender])) )
   309     21913        55866      2.5      1.8                  self._network_state[(nextsender, nextreceiver)].append(t + deltat )
   310     21913       938761     42.8     30.5                  self._remove_old(t+deltat)
   311     21913       627982     28.7     20.4                  alarm = self._intrusion_criteria() < self.d
   312     21913        19160      0.9      0.6                  u = np.random.random()
   313     21913        52752      2.4      1.7                  benign_message = u < 1-np.exp(-1./self._event_rate * (self.gamma - deltat))
   314     10836         4377      0.4      0.1              return alarm


Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   286                                                   @profile          
   287                                                   def _sample_until_next_action(self, t):
   288                                                       """
   289                                                       Draws samples until the attacker's next time to act.   First, it
   290                                                       samples from a distribution to determine if there is a message before
   291                                                       the next attacker action.  Then, conditional on the event occuring, it
   292                                                       samples the event time.
   293                                                       
   294                                                        generates  a sample from
   295                                                       the exponential distirbuiton with parameter lambda truncated at T
   296                                                       """
   297     20294        13462      0.7      0.2              deltat = 0
   298     20294        21865      1.1      0.3              u = np.random.random()
   299     20294        16139      0.8      0.2              benign_messageold = u < expon.cdf(self.gamma - deltat, 
   300     20294      1558465     76.8     21.9                                                              scale = self._event_rate )
   301     20294        75500      3.7      1.1              benign_message = u < 1-np.exp(-1./self._event_rate * (self.gamma - deltat))
   302     20294        44971      2.2      0.6              if benign_messageold != benign_message:
   303                                                           return dddd
   304     20294        10884      0.5      0.2              alarm = False
   305     44033        37042      0.8      0.5              while ((benign_message) and (not alarm)):
   306     23739        75390      3.2      1.1                  R = np.random.random()*(1-np.exp(-(self.gamma-deltat)*1./self._event_rate))
   307     23739        47794      2.0      0.7                  change =-np.log(1-R)*self._event_rate
   308     23739        20932      0.9      0.3                  deltat += change
   309     23739       737820     31.1     10.4                  nextsender = np.random.choice(self._n_hosts, p=self._normed_rowsums)
   310     23739        23074      1.0      0.3                  nextreceiver = np.random.choice(self._n_hosts, 
   311     23739        27153      1.1      0.4                                                  p=self.lambdaB[nextsender] / 
   312     23739       777566     32.8     10.9                                                  float(np.sum(self.lambdaB[nextsender])) )
   313     23739        67810      2.9      1.0                  self._network_state[(nextsender, nextreceiver)].append(t + deltat )
   314     23739      1139553     48.0     16.0                  self._remove_old(t+deltat)
   315     23739       698668     29.4      9.8                  alarm = self._intrusion_criteria() < self.d
   316     23739        35777      1.5      0.5                  benign_message = np.random.random() < expon.cdf(self.gamma - deltat, 
   317     23739      1680268     70.8     23.6                                                              scale = 1. / self._event_rate )
   318                                                           
   319     20294         9101      0.4      0.1              return alarm

